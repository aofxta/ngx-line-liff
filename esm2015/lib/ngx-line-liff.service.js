import { Inject, Injectable } from '@angular/core';
import { AsyncSubject, ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export class NgxLineLiffService {
    constructor(config) {
        this.providers = new Map();
        this.autoLogin = false;
        this._user = null;
        this._authState = new ReplaySubject(1);
        /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */
        this.initialized = false;
        this._initState = new AsyncSubject();
        if (config instanceof Promise) {
            config.then(config => this.initialize(config));
        }
        else {
            this.initialize(config);
        }
    }
    /** An `Observable` that one can subscribe to get the current logged in user information */
    get authState() {
        return this._authState.asObservable();
    }
    /** An `Observable` to communicate the readiness of the service and associated login providers */
    get initState() {
        return this._initState.asObservable();
    }
    initialize(config) {
        this.autoLogin = (config.autoLogin !== undefined) ? config.autoLogin : false;
        const { onError = console.error } = config;
        config.providers.forEach(item => this.providers.set(item.id, item.provider));
        Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize())).then((provide) => {
            if (this.autoLogin) {
                const loginStatusPromises = new Array();
                let loggedIn = false;
                this.providers.forEach((provider, key) => {
                    let promise = provider.getLoginStatus();
                    loginStatusPromises.push(promise);
                    promise.then((user) => {
                        this._user = user;
                        this._authState.next(user);
                        loggedIn = true;
                    }).catch(console.debug);
                });
                Promise.all(loginStatusPromises).catch(() => {
                    if (!loggedIn) {
                        this._user = null;
                        this._authState.next(null);
                    }
                });
            }
        }).catch(err => {
            onError(err);
        }).finally(() => {
            this.initialized = true;
            this._initState.next(this.initialized);
            this._initState.complete();
        });
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => {
            if (!this.initialized) {
                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);
            }
            else {
                const providerObj = this.providers.get('LINE');
                if (providerObj) {
                    providerObj.getLoginStatus().then(user => {
                        this._user = user;
                        this._authState.next(user);
                        resolve(user);
                    }, err => reject(err)).catch(err => reject(err));
                }
                else {
                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    }
    /**
     * A method used to sign in a user with a specific `LoginProvider`.
     * @param signInOption Optional `LoginProvider` specific arguments
     * @returns A `Promise` that resolves to the authenticated user information
     */
    signIn(signInOption) {
        return new Promise((resolve, reject) => {
            if (!this.initialized) {
                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);
            }
            else {
                let providerObj = this.providers.get('LINE');
                if (providerObj) {
                    providerObj.signIn(signInOption).then((user) => {
                        this._user = user;
                        this._authState.next(user);
                        resolve(user);
                    }).catch(err => reject(err));
                }
                else {
                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    }
    /**
     * A method used to sign out the currently loggen in user.
     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise
     */
    signOut() {
        return new Promise((resolve, reject) => {
            if (!this.initialized) {
                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);
            }
            else if (!this._user) {
                reject(NgxLineLiffService.ERR_NOT_LOGGED_IN);
            }
            else {
                const providerObj = this.providers.get('LINE');
                if (providerObj) {
                    providerObj.signOut().then(() => {
                        resolve();
                        this._user = null;
                        this._authState.next(null);
                    }).catch(err => reject(err));
                }
                else {
                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    }
    /**
     * A method used to get provider core.
     * @returns A `Promise` that resolves to the provider core
     */
    providerCore() {
        return new Promise((resolve, reject) => {
            if (!this.initialized) {
                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);
            }
            else if (!this._user) {
                reject(NgxLineLiffService.ERR_NOT_LOGGED_IN);
            }
            else {
                const providerObj = this.providers.get('LINE');
                if (providerObj) {
                    providerObj.providerCore().then(providerCore => resolve(providerCore)).catch(err => reject(err));
                }
                else {
                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);
                }
            }
        });
    }
}
NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';
NgxLineLiffService.ERR_NOT_LOGGED_IN = 'Not logged in';
NgxLineLiffService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';
NgxLineLiffService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';
NgxLineLiffService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: NgxLineLiffService, deps: [{ token: 'LineLiffServiceConfig' }], target: i0.ɵɵFactoryTarget.Injectable });
NgxLineLiffService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: NgxLineLiffService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.5", ngImport: i0, type: NgxLineLiffService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: ['LineLiffServiceConfig']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,