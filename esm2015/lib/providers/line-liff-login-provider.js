import liff from '@line/liff';
import { BaseLoginProvider } from '../entities/base-login-provider';
export class LineLiffLoginProvider extends BaseLoginProvider {
    constructor(channelId, initIptions = {}) {
        super();
        this.channelId = channelId;
        this.initIptions = initIptions;
    }
    initialize() {
        return new Promise((resolve, reject) => {
            var _a;
            try {
                if (!((_a = this.initIptions) === null || _a === void 0 ? void 0 : _a.liffId)) {
                    reject(LineLiffLoginProvider.ERR_LIFF_ID_NOT_FOUND);
                }
                else {
                    // this.loadScript(
                    //     LineLiffLoginProvider.PROVIDER_ID,
                    //     'https://static.line-scdn.net/liff/edge/versions/2.14.0/sdk.js',
                    //     () => {
                    //         liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {
                    //             this.OS = liff.getOS();
                    //             if (liff.isLoggedIn()) liff.getProfile().then((profile: LineProfile) => this.profile = profile, (err: any) => reject(err)).catch(console.error);
                    //             resolve();
                    //         }).catch(console.error);
                    //     }
                    // );
                    liff.init({ liffId: this.initIptions.liffId }).then(() => {
                        this.OS = liff.getOS();
                        if (liff.isLoggedIn())
                            liff.getProfile().then(profile => this.profile = profile).catch(console.error);
                        resolve(liff);
                    }).catch(console.error);
                }
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus(loginStatusOption) {
        return new Promise((resolve, reject) => {
            if (liff.isLoggedIn()) {
                liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {
                    liff.getProfile().then((profile) => {
                        this.profile = profile;
                        resolve(profile);
                    }, (err) => reject(err)).catch(console.error);
                }).catch(console.error);
            }
            else {
                reject(null);
            }
        });
    }
    signIn(signInOption) {
        return new Promise((resolve, reject) => {
            try {
                if (liff.isLoggedIn()) {
                    liff.getProfile().then((profile) => {
                        this.profile = profile;
                        resolve(profile);
                    }, (err) => reject(err)).catch(console.error);
                }
                else if (signInOption === null || signInOption === void 0 ? void 0 : signInOption.redirectUri) {
                    liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {
                        liff.login({ redirectUri: signInOption.redirectUri });
                    }).catch(console.error);
                }
                else {
                    liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {
                        liff.login();
                    }).catch(console.error);
                }
            }
            catch (error) {
                reject(error);
            }
        });
    }
    signOut(revoke) {
        return new Promise((resolve, reject) => {
            try {
                if (liff.isLoggedIn()) {
                    liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {
                        resolve();
                        liff.logout();
                    }).catch(console.error);
                }
                else {
                    resolve();
                }
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /** Running in LIFF browser only. */
    providerCore() {
        return new Promise((resolve, reject) => {
            try {
                if (liff.isInClient()) {
                    resolve(liff);
                }
                else {
                    reject('Running in LIFF browser only.');
                }
            }
            catch (error) {
                reject(error);
            }
        });
    }
}
LineLiffLoginProvider.PROVIDER_ID = 'LINE';
LineLiffLoginProvider.ERR_LIFF_ID_NOT_FOUND = 'LIFF ID is not found.';
//# sourceMappingURL=data:application/json;base64,