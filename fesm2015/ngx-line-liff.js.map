{"version":3,"file":"ngx-line-liff.js","sources":["../../../projects/ngx-line-liff/src/lib/ngx-line-liff.service.ts","../../../projects/ngx-line-liff/src/lib/ngx-line-liff.module.ts","../../../projects/ngx-line-liff/src/lib/entities/base-login-provider.ts","../../../projects/ngx-line-liff/src/lib/providers/line-liff-login-provider.ts","../../../projects/ngx-line-liff/src/public-api.ts","../../../projects/ngx-line-liff/src/ngx-line-liff.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { AsyncSubject, Observable, ReplaySubject } from 'rxjs';\nimport { LineProfile } from './entities/line-profile';\nimport { LoginProvider } from './entities/login-provider';\n\n/**\n * An interface to define the shape of the service configuration options.\n */\nexport interface LineLiffServiceConfig {\n    autoLogin?: boolean;\n    providers: { id: string; provider: LoginProvider }[];\n    onError?: (error: any) => any;\n}\n\n@Injectable()\nexport class NgxLineLiffService {\n    private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\n    private static readonly ERR_NOT_LOGGED_IN = 'Not logged in';\n    private static readonly ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\n    private static readonly ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n\n    private providers: Map<string, LoginProvider> = new Map();\n    private autoLogin = false;\n\n    private _user: LineProfile | null = null;\n    private _authState: ReplaySubject<LineProfile | null> = new ReplaySubject(1);\n\n    /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n    private initialized = false;\n    private _initState: AsyncSubject<boolean> = new AsyncSubject();\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    public get authState(): Observable<LineProfile | null> {\n        return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    public get initState(): Observable<boolean> {\n        return this._initState.asObservable();\n    }\n\n    constructor(\n        @Inject('LineLiffServiceConfig') config: LineLiffServiceConfig | Promise<LineLiffServiceConfig>\n    ) {\n        if (config instanceof Promise) {\n            config.then(config => this.initialize(config));\n        } else {\n            this.initialize(config);\n        }\n    }\n\n    private initialize(config: LineLiffServiceConfig) {\n        this.autoLogin = (config.autoLogin !== undefined) ? config.autoLogin : false;\n        const { onError = console.error } = config;\n\n        config.providers.forEach(item => this.providers.set(item.id, item.provider));\n\n        Promise.all(\n            Array.from(this.providers.values()).map(provider => provider.initialize())\n        ).then((provide: any) => {\n            if (this.autoLogin) {\n                const loginStatusPromises: Array<any> = new Array();\n                let loggedIn = false;\n\n                this.providers.forEach((provider: LoginProvider, key: string) => {\n                    let promise = provider.getLoginStatus();\n                    loginStatusPromises.push(promise);\n                    promise.then((user: LineProfile) => {\n                        this._user = user;\n                        this._authState.next(user);\n                        loggedIn = true;\n                    }).catch(console.debug);\n                });\n                Promise.all(loginStatusPromises).catch(() => {\n                    if (!loggedIn) {\n                        this._user = null;\n                        this._authState.next(null);\n                    }\n                });\n            }\n        }).catch(err => {\n            onError(err);\n        }).finally(() => {\n            this.initialized = true;\n            this._initState.next(this.initialized);\n            this._initState.complete();\n        });\n    }\n    public getLoginStatus(): Promise<LineProfile> {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);\n            } else {\n                const providerObj = this.providers.get('LINE');\n                if (providerObj) {\n                    providerObj.getLoginStatus().then(user => {\n                        this._user = user;\n                        this._authState.next(user);\n                        resolve(user);\n                    }, err => reject(err)).catch(err => reject(err));\n                } else {\n                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     * @param signInOption Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    public signIn(signInOption?: { redirectUri?: string }): Promise<LineProfile> {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);\n            } else {\n                let providerObj = this.providers.get('LINE');\n                if (providerObj) {\n                    providerObj.signIn(signInOption).then((user: LineProfile) => {\n                        this._user = user;\n                        this._authState.next(user);\n                        resolve(user);\n                    }).catch(err => reject(err));\n                } else {\n                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    public signOut(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);\n            } else if (!this._user) {\n                reject(NgxLineLiffService.ERR_NOT_LOGGED_IN);\n            } else {\n                const providerObj = this.providers.get('LINE');\n                if (providerObj) {\n                    providerObj.signOut().then(() => {\n                        resolve();\n                        this._user = null;\n                        this._authState.next(null);\n                    }).catch(err => reject(err));\n                } else {\n                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n\n    /**\n     * A method used to get provider core.\n     * @returns A `Promise` that resolves to the provider core\n     */\n    public providerCore(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this.initialized) {\n                reject(NgxLineLiffService.ERR_NOT_INITIALIZED);\n            } else if (!this._user) {\n                reject(NgxLineLiffService.ERR_NOT_LOGGED_IN);\n            } else {\n                const providerObj = this.providers.get('LINE');\n                if (providerObj) {\n                    providerObj.providerCore().then(providerCore => resolve(providerCore)).catch(err => reject(err));\n                } else {\n                    reject(NgxLineLiffService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n                }\n            }\n        });\n    }\n}","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { NgxLineLiffService } from './ngx-line-liff.service';\n\n@NgModule({\n    imports: [\n        CommonModule,\n    ],\n    providers: [\n        NgxLineLiffService\n    ]\n})\nexport class NgxLineLiffModule {\n    constructor(@Optional() @SkipSelf() parentModule: NgxLineLiffModule) {\n        if (parentModule) throw new Error('NgxLineLiffModule is already loaded. Import it in the AppModule only');\n    }\n\n    public static initialize(config: any): ModuleWithProviders<NgxLineLiffModule> {\n        return {\n            ngModule: NgxLineLiffModule,\n            providers: [\n                NgxLineLiffService,\n                { provide: 'LineLiffServiceConfig', useValue: config }\n            ]\n        }\n    }\n}\n","import { LineProfile } from \"./line-profile\";\r\nimport { LoginProvider } from \"./login-provider\";\r\n\r\nexport abstract class BaseLoginProvider implements LoginProvider {\r\n    constructor() { }\r\n    abstract initialize(): Promise<void|any>;\r\n    abstract getLoginStatus(loginStatusOption?: any): Promise<LineProfile>;\r\n    abstract signIn(signInOption?: any): Promise<LineProfile>;\r\n    abstract signOut(revoke?: boolean): Promise<void>;\r\n    abstract providerCore(): Promise<any>;\r\n\r\n    protected loadScript(\r\n        id: string,\r\n        src: string,\r\n        onload: any,\r\n        parentElement?: any\r\n    ): void {\r\n        // get document if platform is only browser\r\n        if(typeof document !== 'undefined' && !document.getElementById(id)) {\r\n            const signInJs: HTMLScriptElement = document.createElement('script');  \r\n            signInJs.async = true;\r\n            signInJs.src = src;\r\n            signInJs.onload = onload;\r\n            \r\n            if (!parentElement) parentElement = document.head;\r\n            parentElement.appendChild(signInJs);\r\n        }\r\n    }\r\n}","import liff from '@line/liff';\r\nimport { BaseLoginProvider } from '../entities/base-login-provider';\r\nimport { LineProfile } from '../entities/line-profile';\r\n\r\n// declare let liff: any; //-- Use for loadScript js cdn\r\ntype UnPromise<T> = T extends Promise<infer X> ? X : T;\r\ninterface InitOptions {\r\n    liffId?: string;\r\n}\r\nexport class LineLiffLoginProvider extends BaseLoginProvider {\r\n    public static readonly PROVIDER_ID: string = 'LINE';\r\n    public static readonly ERR_LIFF_ID_NOT_FOUND: string = 'LIFF ID is not found.';\r\n\r\n    private OS?: ReturnType<typeof liff.getOS>;\r\n    private profile?: UnPromise<ReturnType<typeof liff.getProfile>>;\r\n    protected authLiff: any;\r\n\r\n    constructor(\r\n        private channelId: string,\r\n        private initIptions: InitOptions = {}\r\n    ) { super(); }\r\n\r\n    public initialize(): Promise<void | any> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (!this.initIptions?.liffId) {\r\n                    reject(LineLiffLoginProvider.ERR_LIFF_ID_NOT_FOUND);\r\n                } else {\r\n                    // this.loadScript(\r\n                    //     LineLiffLoginProvider.PROVIDER_ID,\r\n                    //     'https://static.line-scdn.net/liff/edge/versions/2.14.0/sdk.js',\r\n                    //     () => {\r\n                    //         liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {\r\n                    //             this.OS = liff.getOS();\r\n                    //             if (liff.isLoggedIn()) liff.getProfile().then((profile: LineProfile) => this.profile = profile, (err: any) => reject(err)).catch(console.error);\r\n                    //             resolve();\r\n                    //         }).catch(console.error);\r\n                    //     }\r\n                    // );\r\n                    liff.init({ liffId: this.initIptions.liffId }).then(() => {\r\n                        this.OS = liff.getOS();\r\n                        if (liff.isLoggedIn()) liff.getProfile().then(profile => this.profile = profile).catch(console.error);\r\n                        resolve(liff);\r\n                    }).catch(console.error);\r\n                }\r\n            } catch (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n    }\r\n\r\n    public getLoginStatus(loginStatusOption?: any): Promise<LineProfile> {\r\n        return new Promise((resolve, reject) => {\r\n            if (liff.isLoggedIn()) {\r\n                liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {\r\n                    liff.getProfile().then((profile: LineProfile) => {\r\n                        this.profile = profile;\r\n                        resolve(profile);\r\n                    }, (err: any) => reject(err)).catch(console.error);\r\n                }).catch(console.error);\r\n            } else {\r\n                reject(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    public signIn(signInOption?: any): Promise<LineProfile> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (liff.isLoggedIn()) {\r\n                    liff.getProfile().then((profile: LineProfile) => {\r\n                        this.profile = profile;\r\n                        resolve(profile);\r\n                    }, (err: any) => reject(err)).catch(console.error);\r\n                } else if (signInOption?.redirectUri) {\r\n                    liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {\r\n                        liff.login({ redirectUri: signInOption.redirectUri });\r\n                    }).catch(console.error);\r\n                } else {\r\n                    liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {\r\n                        liff.login();\r\n                    }).catch(console.error);\r\n                }\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    public signOut(revoke?: boolean): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (liff.isLoggedIn()) {\r\n                    liff.init({ liffId: String(this.initIptions.liffId) }).then(() => {\r\n                        resolve();\r\n                        liff.logout();\r\n                    }).catch(console.error);\r\n                } else {\r\n                    resolve();\r\n                }\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** Running in LIFF browser only. */\r\n    public providerCore(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (liff.isInClient()) {\r\n                    resolve(liff);\r\n                } else {\r\n                    reject('Running in LIFF browser only.');\r\n                }\r\n            } catch (error) {\r\n                reject(error);\r\n            }\r\n        });\r\n    }\r\n}","/*\n * Public API Surface of ngx-line-liff\n */\nexport {\n    NgxLineLiffService,\n    LineLiffServiceConfig\n} from './lib/ngx-line-liff.service';\nexport { NgxLineLiffModule } from './lib/ngx-line-liff.module';\nexport { LineProfile } from './lib/entities/line-profile';\nexport { LineLiffLoginProvider } from './lib/providers/line-liff-login-provider';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}